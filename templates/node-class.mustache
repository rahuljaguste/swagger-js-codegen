/*jshint -W069 */
/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
 * @param {string} [domainOrOptions.domain] - The project domain
 * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
 */

// Uncomment for node
// var fetch = require('node-fetch');

var {{&className}} = (function(){
    'use strict';

    const Promise = require('bluebird');

    function defer() {
        var resolve, reject;
        var promise = new Promise(function() {
            resolve = arguments[0];
            reject = arguments[1];
            });
            return {
            resolve: resolve,
            reject: reject,
            promise: promise
        };
    }

    function {{&className}}(options){
        var domain = (typeof options === 'object') ? options.domain : options;
        this.domain = domain ? domain : '{{&domain}}';
        if(this.domain.length === 0) {
            throw new Error('Domain parameter must be specified as a string.');
        }
        {{#isSecure}}
            this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
        {{/isSecure}}
    }

    function serializeQueryParams(parameters) {
        var str = [];
        for (var p in parameters)
            if (parameters.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(parameters[p]));
            }
        return str.join("&");
    }

    {{&className}}.prototype.request = function(method, url, parameters, body, headers, queryParameters, form, deferred){
        const queryParams = serializeQueryParams(parameters);
        const urlWithParams = url + '?' + queryParams;

    fetch(urlWithParams, {
        method,
        headers,
        body: JSON.stringify(body)
        }).then((response) => response.json())
        .then((responseJson) => {
         deferred.resolve(responseJson);
        })
        .catch((error) => {
         deferred.reject(error);
        });
    };


{{#isSecure}}
        /**
         * Set Token
         * @method
         * @name {{&className}}#setToken
         * @param {string} value - token's value
         * @param {string} headerOrQueryName - the header or query name to send the token at
         * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
         *
         */
        {{&className}}.prototype.setToken = function (value, headerOrQueryName, isQuery) {
            this.token.value = value;
            this.token.headerOrQueryName = headerOrQueryName;
            this.token.isQuery = isQuery;
        };
    {{/isSecure}}

    {{#methods}}
        {{> method}}
    {{/methods}}

    return {{&className}};
})();

exports.{{&className}} = {{&className}};
